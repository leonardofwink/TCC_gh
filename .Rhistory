)
pacman::p_load(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# cowplot,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
## Tabelas
kableExtra,
gtsummary,
)
grid.arrange(
tukey_boxplot, box_percentile_plot,
ncol = 2
)
View(fig_tukey_garrett)
pacman::p_load(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
cowplot,
## Tabelas
kableExtra,
gtsummary,
)
pacman::p_load(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
cowplot,
## Tabelas
kableExtra,
gtsummary
)
(pH <- boxplot_pH(
titulo = "pH no período 1990-2020"
)+
facet_wrap(~periodo)
)
boxplot_pH <- function(dados = plan_wide_19902020, eixo_x = codigo, eixo_y = pH, titulo = "pH"){
ggplot2::ggplot(
data = dados,
aes(
x = {{eixo_x}},
y = {{eixo_y}}
)
)+
annotate("rect",
xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = 6,
alpha = 1,
fill="#eb5661")+ #classe 4
annotate("rect",
xmin = -Inf, xmax = Inf,
ymin = 9, ymax = Inf,
alpha = 1,
fill="#eb5661")+ #classe 4
annotate("rect",
xmin = -Inf, xmax = Inf,
ymin = 6, ymax = 9,
alpha = 1,
fill="#8dcdeb")+ #classe 1
stat_summary(
fun.data = f,
geom = 'errorbar',
width = 0.3,
position = position_dodge(width = 0.65),
)+
stat_summary(
fun.data = f,
geom = "boxplot",
width = 0.7,
fill = '#F8F8FF',
color = "black",
outlier.shape = NA, #se deixar NA fica só o jitter, se não, deixa 1
)+
labs(
title = titulo,
x= NULL,
y="mg/L"
)+
ggbeeswarm::geom_quasirandom(
size = 1.2,
alpha = .25,
width = .07,
)+
scale_y_continuous(expand = expansion(mult = c(0.01, 0.01)),
n.breaks = 8,
limits = c(4,11),
labels = scales::number_format(accuracy = 1,
decimal.mark = ",",
big.mark = " "))+
scale_x_discrete(limits = c("87398500",
"87398980",
"87398900",
"87398950",
"87405500",
"87406900",
"87409900"),
labels = c("PM1", "PM2", "PM3", "PM4", "PM5", "PM6", "PM7")
)+
geom_smooth(
method = "lm",
se=FALSE, #se deixar TRUE gera o intervalo de confiança de 95%
aes(group = 1),
alpha = .5,
na.rm = TRUE,
size = 1
)+
theme_grafs()
}
(pH_p1 <- plan_wide_19902020 %>%
filter(ano_coleta > "1990" &
ano_coleta <= "2000") %>%
boxplot_pH(
titulo = "pH no período 1990-2000"
)
)
(pH <- boxplot_pH(
titulo = "pH no período 1990-2020"
)+
facet_wrap(~periodo)
)
q
(pH <- boxplot_pH(
titulo = "pH no período 1990-2020"
)+
facet_wrap(~periodo)
)
# Chunk 1: Rotina pra toda vez que abrir o documento
# Abrir o GitHub Desktop
# Verificar se há pull pra ser feito
# Abrir o RStudio
# Chunk 2: Acessar os pacotes
pacman::p_load(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
cowplot,
## Tabelas
kableExtra,
gtsummary
)
# pacman::p_load(tibbletime)
# cite_packages()
# Chunk 3: cronometrando quanto tempo cada chunk leva
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
# record the current time before each chunk
now <<- Sys.time()
} else {
# calculate the time difference after a chunk
res <- difftime(Sys.time(), now)
# return a character string to show the time
paste("Tempo para esse code chunk ser rodado:", round(res, digits = 2), "s")
}
}
}))
knitr::opts_chunk$set(time_it = TRUE)
# Chunk 4: setup
# knitr::opts_chunk$set(echo = TRUE)
# Chunk 5: referenciando os pacotes
version$version.string
# citation(package = "tidyverse")
# Chunk 6: Importando a planilha
plan_wide_19902020 <- read_delim("https://raw.githubusercontent.com/leonardofwink/TCC_gh/main/plan_wide_19902020.tsv",
delim = "\t",
escape_double = FALSE,
col_types = cols(
Alcalinidade = col_double(),
CODIGO = col_character(),
COORD_GEO_LAT_GRAU = col_double(),
COORD_GEO_LONG_GRAU = col_double(),
DATA_COLETA = col_date(format = "%d/%m/%Y"),
Nitrato = col_double(),
Nitrito = col_double(),
SDT = col_double(),
SST = col_double(),
`Vazao` = col_double(),
`Vazao rio` = col_double()
),
locale = locale(
date_names = "pt",
decimal_mark = ",",
grouping_mark = ""
),
trim_ws = TRUE
) %>%
janitor::clean_names() %>%
rename(
pH = p_h,
iqa_pH = iqa_p_h,
iqa_pH_2 = iqa_p_h_2
) %>%
mutate(
ponto_monitoramento = case_when(
codigo == "87398500" ~ "PM1",
codigo == "87398980" ~ "PM2",
codigo == "87398900" ~ "PM3",
codigo == "87398950" ~ "PM4",
codigo == "87405500" ~ "PM5",
codigo == "87406900" ~ "PM6",
codigo == "87409900" ~ "PM7"
)
) %>%
select(codigo, ponto_monitoramento, everything()) %>% #reordenando colunas
arrange(data_coleta, ponto_monitoramento)
# Chunk 1: Rotina pra toda vez que abrir o documento
# Abrir o GitHub Desktop
# Verificar se há pull pra ser feito
# Abrir o RStudio
# Chunk 2: Acessar os pacotes
pacman::p_load(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
cowplot,
## Tabelas
kableExtra,
gtsummary
)
# pacman::p_load(tibbletime)
# cite_packages()
# Chunk 3: cronometrando quanto tempo cada chunk leva
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
# record the current time before each chunk
now <<- Sys.time()
} else {
# calculate the time difference after a chunk
res <- difftime(Sys.time(), now)
# return a character string to show the time
paste("Tempo para esse code chunk ser rodado:", round(res, digits = 2), "s")
}
}
}))
knitr::opts_chunk$set(time_it = TRUE)
# Chunk 4: setup
# knitr::opts_chunk$set(echo = TRUE)
# Chunk 5: referenciando os pacotes
version$version.string
# citation(package = "tidyverse")
# Chunk 6: Importando a planilha
plan_wide_19902020 <- read_delim("https://raw.githubusercontent.com/leonardofwink/TCC_gh/main/plan_wide_19902020.tsv",
delim = "\t",
escape_double = FALSE,
col_types = cols(
Alcalinidade = col_double(),
CODIGO = col_character(),
COORD_GEO_LAT_GRAU = col_double(),
COORD_GEO_LONG_GRAU = col_double(),
DATA_COLETA = col_date(format = "%d/%m/%Y"),
Nitrato = col_double(),
Nitrito = col_double(),
SDT = col_double(),
SST = col_double(),
`Vazao` = col_double(),
`Vazao rio` = col_double()
),
locale = locale(
date_names = "pt",
decimal_mark = ",",
grouping_mark = ""
),
trim_ws = TRUE
) %>%
janitor::clean_names() %>%
rename(
pH = p_h,
iqa_pH = iqa_p_h,
iqa_pH_2 = iqa_p_h_2
) %>%
mutate(
ponto_monitoramento = case_when(
codigo == "87398500" ~ "PM1",
codigo == "87398980" ~ "PM2",
codigo == "87398900" ~ "PM3",
codigo == "87398950" ~ "PM4",
codigo == "87405500" ~ "PM5",
codigo == "87406900" ~ "PM6",
codigo == "87409900" ~ "PM7"
)
) %>%
select(codigo, ponto_monitoramento, everything()) %>% #reordenando colunas
arrange(data_coleta, ponto_monitoramento)
.libPaths()
R_LIBS_SITE="E:\\Documents\\R\\R-4.2.2\\library"
R_LIBS_SITE="E:\\Documents\\R\\R-4.2.2\\library"
pacman::p_load(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
cowplot,
## Tabelas
kableExtra,
gtsummary
)
# pacman::p_load(tibbletime)
# cite_packages()
boxplot_pH <- function(dados = plan_wide_19902020, eixo_x = codigo, eixo_y = pH, titulo = "pH"){
ggplot2::ggplot(
data = dados,
aes(
x = {{eixo_x}},
y = {{eixo_y}}
)
)+
annotate("rect",
xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = 6,
alpha = 1,
fill="#eb5661")+ #classe 4
annotate("rect",
xmin = -Inf, xmax = Inf,
ymin = 9, ymax = Inf,
alpha = 1,
fill="#eb5661")+ #classe 4
annotate("rect",
xmin = -Inf, xmax = Inf,
ymin = 6, ymax = 9,
alpha = 1,
fill="#8dcdeb")+ #classe 1
stat_summary(
fun.data = f,
geom = 'errorbar',
width = 0.3,
position = position_dodge(width = 0.65),
)+
stat_summary(
fun.data = f,
geom = "boxplot",
width = 0.7,
fill = '#F8F8FF',
color = "black",
outlier.shape = NA, #se deixar NA fica só o jitter, se não, deixa 1
)+
labs(
title = titulo,
x= NULL,
y="mg/L"
)+
ggbeeswarm::geom_quasirandom(
size = 1.2,
alpha = .25,
width = .07,
)+
scale_y_continuous(expand = expansion(mult = c(0.01, 0.01)),
n.breaks = 8,
limits = c(4,11),
labels = scales::number_format(accuracy = 1,
decimal.mark = ",",
big.mark = " "))+
scale_x_discrete(limits = c("87398500",
"87398980",
"87398900",
"87398950",
"87405500",
"87406900",
"87409900"),
labels = c("PM1", "PM2", "PM3", "PM4", "PM5", "PM6", "PM7")
)+
geom_smooth(
method = "lm",
se=FALSE, #se deixar TRUE gera o intervalo de confiança de 95%
aes(group = 1),
alpha = .5,
na.rm = TRUE,
size = 1
)+
theme_grafs()
}
(pH <- boxplot_pH(
titulo = "pH no período 1990-2020"
)+
facet_wrap(~periodo)
)
library(
c(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
cowplot,
## Tabelas
kableExtra,
gtsummary
)
)
pacotes <-
c(
# ETL/data wrangling
readr, readxl, janitor,
tidyverse,
dplyr,
# pillar,
# see,
#modelsummary,
# report,
# Data Viz
rmarkdown,
knitr,
## Gráficos
ggplot2,
GGally,
ggtext,
ggbeeswarm,
gridExtra,
cowplot,
## Tabelas
kableExtra,
gtsummary
)
